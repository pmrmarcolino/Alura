Servidor :

$ java -cp hsqldb.jar org.hsqldb.server.Server --dbname.0 loja-virtual --database.0 file:loja-virtual

Editor visual do banco de dados: 

$ java -cp hsqldb.jar org.hsqldb.util.DatabaseManager

type: HSQL Database Engine Server
URL: jdbc:hsqldb:hsql://localhost/loja-virtual

Como funciona o retorno do método execute da interface Statement?
O método é claro em seu javadoc: se o retorno é um ResultSet por conta de um select, ele retorna true. Caso contrário ou 
caso não haja nenhum valor retornado, o método devolve false.

Quais os riscos de utilizar um Statement ao inves de um PreparedStatement? Você já ouviu falar ou conheceu sistemas que sofriam com tais problemas?
O principal problema de não usar statement está ligado com o SQL Injection: os usuários podem quebrar nossas queries e atacar nosso sistema caso eles escrevam valores específicos em nossos campos e não tratemos eles.
Outro problema é de performance: um prepared statement permite execução de inserts ou updates em batch.

Porq usar o DAO?
A vantagem está ligada com a capacidade de isolar todo o código que acessa seu repositório de dados em um único lugar. Qualquer desenvolvedor sabe que quando 
for necessário trabalhar com tal camada, existe um único lugar para olhar: seus DAOs.

O que acontece caso uma tarefa tenha que acessar dois dados, como o ProdutosDAO e CategoriasDAO? Qual a desvantagem desta abordagem?
Um problema grave ocorre quando tentarmos utilizar transações. Como cada um dos DAOs possui uma conexão distinta, eles não estarão envolvidos 
na mesma transação e ficamos incapazes de utilizar tal recurso.
Outro problema é que abrimos um número grande de conexões para a execução de cada tarefa: se ela precisa de 2 daos, serão 2 conexões.

Criar tabela:
create table Categoria (id integer generated by default as identity primary key, nome varchar(255))

Add coluna na tabela Produto:
alter table Produto add column categoria_id integer

Atualizando a nova coluna: 
update Produto set categoria_id=0 where id in (1,2)
 
